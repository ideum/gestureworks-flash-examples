package as3.layouts
{
	import com.gestureworks.cml.elements.Container;
	import com.gestureworks.cml.elements.Image;
	import com.gestureworks.cml.layouts.PileLayout;
	import com.gestureworks.core.GestureWorks;
	import com.gestureworks.utils.ExampleTemplate;
	import flash.events.Event;
	
	[SWF(width="1280",height="720",backgroundColor="0x000000",frameRate="30")]
	
	public class PileLayoutEx extends GestureWorks
	{
		public function PileLayoutEx():void
		{
			gml = "gml/gestures.gml";
		}
		
		override protected function gestureworksInit():void
		{
			// entry point
			var exTemp:ExampleTemplate = new ExampleTemplate();
			exTemp.createHeader();
			addChild(exTemp);
			
			exTemp.createTitle("PileLayout");
			exTemp.createDesc("<p>The PileLayout positions the centers of the container's objects in the same location and rotates them individually around the center. <br /><br />" + "This example demonstrates a pile layout with a random angle of rotation and one with a fixed angle of rotation.</p>" + "<br /><p>See also:<br />LayoutFactory<br />FanLayout<br /></p>");
			
			var randomRotationPile:Container = getImageContainer();
			randomRotationPile.x = 700;
			randomRotationPile.y = 200;
			randomRotationPile.applyLayout(getPileLayout());
			addChild(randomRotationPile);
			
			var fixedRotationPile:Container = getImageContainer();
			fixedRotationPile.x = 1000;
			fixedRotationPile.y = 500;
			fixedRotationPile.applyLayout(getPileLayout(20));
			addChild(fixedRotationPile);
		
		}
		
		/**
		 * Returns a container of images
		 * @return
		 */
		private function getImageContainer():Container
		{
			var container:Container = new Container();
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			return container;
		}
		
		/**
		 * Returns a PileLayout
		 * @param	angle  the angle of rotation around the center
		 * @return
		 */
		private function getPileLayout(angle:Number = NaN):PileLayout
		{
			var pileLayout:PileLayout = new PileLayout();
			pileLayout.angle = angle;
			pileLayout.tween = true;
			pileLayout.tweenTime = 1500;
			return pileLayout;
		}
		
		/**
		 * Returns an image element generated by the external source
		 * @param	source  the source file
		 * @return
		 */
		private function getImage(source:String):Image
		{
			var img:Image = new Image();
			img.open(source);
			img.width = 250;
			img.height = 150;
			img.resample = true;
			return img;
		}
	}

}