package as3.layouts
{
	import com.gestureworks.cml.elements.Image;
	import com.gestureworks.cml.elements.TouchContainer;
	import com.gestureworks.cml.layouts.RandomLayout;
	import com.gestureworks.core.GestureWorks;
	import com.gestureworks.utils.ExampleTemplate;
	import flash.events.Event;
	
	[SWF(width="1280",height="720",backgroundColor="0x000000",frameRate="30")]
	
	public class RandomLayoutEx extends GestureWorks
	{
		public function RandomLayoutEx():void
		{	
			gml = "gml/gestures.gml";
		}
		
		override protected function gestureworksInit():void
		{
			// entry point
			var exTemp:ExampleTemplate = new ExampleTemplate();
			addChild(exTemp);
			
			exTemp.createTitle("RandomLayout");
			exTemp.createDesc("<p>The RandomLayout positions the container's objects randomly about the x and y axes and applies a specified amount of random rotation. The available types are randomX, randomY, randomXY, and randomXYRotation. Limitations can be set by the minimum and maximum attributes(minX, maxX, minY, maxY, minRot, maxRot).<br /><br />" + "This example demonstrates a layout with rondom x, y, and rotation values.</p>" + "<br /><p>See also:<br />LayoutFactory<br />PointLayout<br /></p>");
			
			var randomContainer:TouchContainer = getImageContainer();
			randomContainer.x = 500;
			randomContainer.y = 20;
			addChild(randomContainer);
			
			var randomLayout:RandomLayout = new RandomLayout();
			randomLayout.maxX = 400;
			randomLayout.maxY = 500;
			randomLayout.minRot = -30;
			randomLayout.maxRot = 30;
			randomLayout.type = "randomXYRotation";
			randomLayout.tween = true;
			randomLayout.tweenTime = 1500;
			randomContainer.applyLayout(randomLayout);
		
		}
		
		/**
		 * Returns a container of images
		 * @return
		 */
		private function getImageContainer():TouchContainer
		{
			var container:TouchContainer = new TouchContainer();
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			return container;
		}
		
		/**
		 * Returns an image element generated by the external source
		 * @param	source  the source file
		 * @return
		 */
		private function getImage(source:String):Image
		{
			var img:Image = new Image();
			img.open(source);
			img.width = 250;
			img.height = 150;
			img.resample = true;
			return img;
		}
	}

}