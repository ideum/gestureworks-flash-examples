package as3.layouts
{
	import com.gestureworks.cml.elements.Container;
	import com.gestureworks.cml.elements.Image;
	import com.gestureworks.cml.layouts.PointLayout;
	import com.gestureworks.core.GestureWorks;
	import com.gestureworks.utils.ExampleTemplate;
	import flash.events.Event;
	
	[SWF(width="1280",height="720",backgroundColor="0x000000",frameRate="30")]
	
	public class PointLayoutEx extends GestureWorks
	{
		public function PointLayoutEx():void
		{
			gml = "gml/gestures.gml";
		}
		
		override protected function gestureworksInit():void
		{
			// entry point			
			var exTemp:ExampleTemplate = new ExampleTemplate();
			exTemp.createHeader();
			addChild(exTemp);
			
			exTemp.createTitle("PointLayout");
			exTemp.createDesc("<p>The PointLayout positions the objects of a container based on a user defined list of xy coordinates. The list is a comma delimited string of number values assigned to the \"points\" attribute.<br /><br />" + "This example demonstrates a layout based on a user defined list of points.</p>" + "<br /><p>See also:<br />LayoutFactory<br />RandomLayout<br /></p>");
			
			var pointContainer:Container = getImageContainer();
			pointContainer.x = 500;
			pointContainer.y = 20;
			addChild(pointContainer);
			
			var pointLayout:PointLayout = new PointLayout();
			pointLayout.points = "10,400,200,250,450,350,400,400,523";
			pointLayout.tween = true;
			pointLayout.tweenTime = 1500;
			pointContainer.applyLayout(pointLayout);
		}
		
		/**
		 * Returns a container of images
		 * @return
		 */
		private function getImageContainer():Container
		{
			var container:Container = new Container();
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			container.addChild(getImage("assets/images/plane.jpg"));
			return container;
		}
		
		/**
		 * Returns an image element generated by the external source
		 * @param	source  the source file
		 * @return
		 */
		private function getImage(source:String):Image
		{
			var img:Image = new Image();
			img.open(source);
			img.width = 250;
			img.height = 150;
			img.resample = true;
			return img;
		}
	}

}